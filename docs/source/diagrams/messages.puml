@startuml



rectangle "net_messages"{
  'class MessageData << (D,lightblue) >>
  class MessageClient{
    sends messages through processor
  }


  class MessageStream{
    async send_data_message(data, destination, session) -> Message
    async forward_message(message)
    async receive_data_message() -> Message
    close()
    async wait_closed()
  }
  interface MessageReceiver{
    async start()
    stop()
    async wait_till_stopped()
  }
  class MessageReceiverCallback
  abstract MessageProcessor
  
  'interface IMessage
  class Message

  class SessionPool{
    currently just a dict...
  }
  class MessageQueue{
    queue of received messages
  }

  interface MessageStreamFactory{
    open_message_connection
  }
  interface MessageReceiverFactory{
    current: create_server
    --
    async create_receiving_task(address, callback)
  }
}

'Message --|> IMessage

MessageClient --> Message
MessageClient --> MessageStreamFactory
MessageClient --> SessionPool
MessageClient --> MessageQueue
'MessageClient --> MessageData

MessageProcessor o--> MessageReceiverFactory
MessageProcessor o--> MessageStreamFactory
MessageProcessor o--> SessionPool
MessageProcessor o--> MessageQueue
MessageProcessor o--> "*" MessageClient
MessageProcessor --> MessageReceiver
MessageProcessor *--> MessageReceiverCallback

MessageReceiverCallback --> Message

MessageReceiverFactory --> MessageReceiver

MessageReceiver --> MessageReceiverCallback
MessageReceiver --> MessageStream

MessageStreamFactory --> MessageStream

MessageStream --> Message
MessageStream --> asyncio.StreamReader
MessageStream --> asyncio.StreamWriter

rectangle impl {
  'TcpMessageSender --|> MessageStream
  TcpMessageReceiver --|> MessageReceiver
  TcpMessageStreamFactory --|> MessageStreamFactory
  TcpMessageReceiverFactory --|> MessageReceiverFactory
}

@enduml
